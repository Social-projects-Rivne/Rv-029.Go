// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Social-projects-Rivne/Rv-029.Go/backend/models (interfaces: IssueCRUD)

// Package mocks is a generated GoMock package.
package mocks

import (
	models "github.com/Social-projects-Rivne/Rv-029.Go/backend/models"
	gocql "github.com/gocql/gocql"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIssueCRUD is a mock of IssueCRUD interface
type MockIssueCRUD struct {
	ctrl     *gomock.Controller
	recorder *MockIssueCRUDMockRecorder
}

// MockIssueCRUDMockRecorder is the mock recorder for MockIssueCRUD
type MockIssueCRUDMockRecorder struct {
	mock *MockIssueCRUD
}

// NewMockIssueCRUD creates a new mock instance
func NewMockIssueCRUD(ctrl *gomock.Controller) *MockIssueCRUD {
	mock := &MockIssueCRUD{ctrl: ctrl}
	mock.recorder = &MockIssueCRUDMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIssueCRUD) EXPECT() *MockIssueCRUDMockRecorder {
	return m.recorder
}

// Delete mocks base method
func (m *MockIssueCRUD) Delete(arg0 *models.Issue) error {
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockIssueCRUDMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIssueCRUD)(nil).Delete), arg0)
}

// FindByID mocks base method
func (m *MockIssueCRUD) FindByID(arg0 *models.Issue) error {
	ret := m.ctrl.Call(m, "FindByID", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindByID indicates an expected call of FindByID
func (mr *MockIssueCRUDMockRecorder) FindByID(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockIssueCRUD)(nil).FindByID), arg0)
}

// GetBoardBacklogIssuesList mocks base method
func (m *MockIssueCRUD) GetBoardBacklogIssuesList(arg0 *models.Issue) ([]models.Issue, error) {
	ret := m.ctrl.Call(m, "GetBoardBacklogIssuesList", arg0)
	ret0, _ := ret[0].([]models.Issue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBoardBacklogIssuesList indicates an expected call of GetBoardBacklogIssuesList
func (mr *MockIssueCRUDMockRecorder) GetBoardBacklogIssuesList(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBoardBacklogIssuesList", reflect.TypeOf((*MockIssueCRUD)(nil).GetBoardBacklogIssuesList), arg0)
}

// GetBoardIssuesList mocks base method
func (m *MockIssueCRUD) GetBoardIssuesList(arg0 *models.Issue) ([]models.Issue, error) {
	ret := m.ctrl.Call(m, "GetBoardIssuesList", arg0)
	ret0, _ := ret[0].([]models.Issue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBoardIssuesList indicates an expected call of GetBoardIssuesList
func (mr *MockIssueCRUDMockRecorder) GetBoardIssuesList(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBoardIssuesList", reflect.TypeOf((*MockIssueCRUD)(nil).GetBoardIssuesList), arg0)
}

// GetSprintIssueList mocks base method
func (m *MockIssueCRUD) GetSprintIssueList(arg0 *models.Issue) ([]models.Issue, error) {
	ret := m.ctrl.Call(m, "GetSprintIssueList", arg0)
	ret0, _ := ret[0].([]models.Issue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSprintIssueList indicates an expected call of GetSprintIssueList
func (mr *MockIssueCRUDMockRecorder) GetSprintIssueList(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSprintIssueList", reflect.TypeOf((*MockIssueCRUD)(nil).GetSprintIssueList), arg0)
}

// Insert mocks base method
func (m *MockIssueCRUD) Insert(arg0 *models.Issue) error {
	ret := m.ctrl.Call(m, "Insert", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockIssueCRUDMockRecorder) Insert(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockIssueCRUD)(nil).Insert), arg0)
}

// SetParentIssue mocks base method
func (m *MockIssueCRUD) SetParentIssue(arg0, arg1 gocql.UUID) error {
	ret := m.ctrl.Call(m, "SetParentIssue", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetParentIssue indicates an expected call of SetParentIssue
func (mr *MockIssueCRUDMockRecorder) SetParentIssue(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetParentIssue", reflect.TypeOf((*MockIssueCRUD)(nil).SetParentIssue), arg0, arg1)
}

// Update mocks base method
func (m *MockIssueCRUD) Update(arg0 *models.Issue) error {
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockIssueCRUDMockRecorder) Update(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIssueCRUD)(nil).Update), arg0)
}
