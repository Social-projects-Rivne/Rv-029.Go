// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Social-projects-Rivne/Rv-029.Go/backend/models (interfaces: BoardCRUD)

// Package mocks is a generated GoMock package.
package mocks

import (
	models "github.com/Social-projects-Rivne/Rv-029.Go/backend/models"
	gocql "github.com/gocql/gocql"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockBoardCRUD is a mock of BoardCRUD interface
type MockBoardCRUD struct {
	ctrl     *gomock.Controller
	recorder *MockBoardCRUDMockRecorder
}

// MockBoardCRUDMockRecorder is the mock recorder for MockBoardCRUD
type MockBoardCRUDMockRecorder struct {
	mock *MockBoardCRUD
}

// NewMockBoardCRUD creates a new mock instance
func NewMockBoardCRUD(ctrl *gomock.Controller) *MockBoardCRUD {
	mock := &MockBoardCRUD{ctrl: ctrl}
	mock.recorder = &MockBoardCRUDMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBoardCRUD) EXPECT() *MockBoardCRUDMockRecorder {
	return m.recorder
}

// Delete mocks base method
func (m *MockBoardCRUD) Delete(arg0 *models.Board) error {
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockBoardCRUDMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBoardCRUD)(nil).Delete), arg0)
}

// FindByID mocks base method
func (m *MockBoardCRUD) FindByID(arg0 *models.Board) error {
	ret := m.ctrl.Call(m, "FindByID", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindByID indicates an expected call of FindByID
func (mr *MockBoardCRUDMockRecorder) FindByID(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockBoardCRUD)(nil).FindByID), arg0)
}

// Insert mocks base method
func (m *MockBoardCRUD) Insert(arg0 *models.Board) error {
	ret := m.ctrl.Call(m, "Insert", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockBoardCRUDMockRecorder) Insert(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockBoardCRUD)(nil).Insert), arg0)
}

// List mocks base method
func (m *MockBoardCRUD) List(arg0 gocql.UUID) ([]map[string]interface{}, error) {
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockBoardCRUDMockRecorder) List(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockBoardCRUD)(nil).List), arg0)
}

// Update mocks base method
func (m *MockBoardCRUD) Update(arg0 *models.Board) error {
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockBoardCRUDMockRecorder) Update(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockBoardCRUD)(nil).Update), arg0)
}
