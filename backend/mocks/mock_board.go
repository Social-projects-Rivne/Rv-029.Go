// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Social-projects-Rivne/Rv-029.Go/backend/controllers (interfaces: CRUD)

// Package mocks is a generated GoMock package.
package mocks

import (
	gocql "github.com/gocql/gocql"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCRUD is a mock of CRUD interface
type MockCRUD struct {
	ctrl     *gomock.Controller
	recorder *MockCRUDMockRecorder
}

// MockCRUDMockRecorder is the mock recorder for MockCRUD
type MockCRUDMockRecorder struct {
	mock *MockCRUD
}

// NewMockCRUD creates a new mock instance
func NewMockCRUD(ctrl *gomock.Controller) *MockCRUD {
	mock := &MockCRUD{ctrl: ctrl}
	mock.recorder = &MockCRUDMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCRUD) EXPECT() *MockCRUDMockRecorder {
	return m.recorder
}

// Delete mocks base method
func (m *MockCRUD) Delete() error {
	ret := m.ctrl.Call(m, "Delete")
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockCRUDMockRecorder) Delete() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCRUD)(nil).Delete))
}

// FindByID mocks base method
func (m *MockCRUD) FindByID() error {
	ret := m.ctrl.Call(m, "FindByID")
	ret0, _ := ret[0].(error)
	return ret0
}

// FindByID indicates an expected call of FindByID
func (mr *MockCRUDMockRecorder) FindByID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockCRUD)(nil).FindByID))
}

// Insert mocks base method
func (m *MockCRUD) Insert() error {
	ret := m.ctrl.Call(m, "Insert")
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockCRUDMockRecorder) Insert() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockCRUD)(nil).Insert))
}

// List mocks base method
func (m *MockCRUD) List(arg0 gocql.UUID) ([]map[string]interface{}, error) {
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockCRUDMockRecorder) List(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCRUD)(nil).List), arg0)
}

// Update mocks base method
func (m *MockCRUD) Update() error {
	ret := m.ctrl.Call(m, "Update")
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockCRUDMockRecorder) Update() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCRUD)(nil).Update))
}
