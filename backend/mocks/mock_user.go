// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Social-projects-Rivne/Rv-029.Go/backend/models (interfaces: Userer)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserer is a mock of Userer interface
type MockUserer struct {
	ctrl     *gomock.Controller
	recorder *MockUsererMockRecorder
}

// MockUsererMockRecorder is the mock recorder for MockUserer
type MockUsererMockRecorder struct {
	mock *MockUserer
}

// NewMockUserer creates a new mock instance
func NewMockUserer(ctrl *gomock.Controller) *MockUserer {
	mock := &MockUserer{ctrl: ctrl}
	mock.recorder = &MockUsererMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserer) EXPECT() *MockUsererMockRecorder {
	return m.recorder
}

// Delete mocks base method
func (m *MockUserer) Delete() error {
	ret := m.ctrl.Call(m, "Delete")
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockUsererMockRecorder) Delete() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserer)(nil).Delete))
}

// FindByEmail mocks base method
func (m *MockUserer) FindByEmail(arg0 string) error {
	ret := m.ctrl.Call(m, "FindByEmail", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindByEmail indicates an expected call of FindByEmail
func (mr *MockUsererMockRecorder) FindByEmail(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockUserer)(nil).FindByEmail), arg0)
}

// FindByID mocks base method
func (m *MockUserer) FindByID(arg0 string) error {
	ret := m.ctrl.Call(m, "FindByID", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindByID indicates an expected call of FindByID
func (mr *MockUsererMockRecorder) FindByID(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockUserer)(nil).FindByID), arg0)
}

// Insert mocks base method
func (m *MockUserer) Insert() error {
	ret := m.ctrl.Call(m, "Insert")
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockUsererMockRecorder) Insert() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockUserer)(nil).Insert))
}

// Update mocks base method
func (m *MockUserer) Update() error {
	ret := m.ctrl.Call(m, "Update")
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockUsererMockRecorder) Update() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserer)(nil).Update))
}
