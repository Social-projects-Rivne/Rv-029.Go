// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Social-projects-Rivne/Rv-029.Go/backend/models (interfaces: UserCRUD)

// Package mocks is a generated GoMock package.
package mocks

import (
	models "github.com/Social-projects-Rivne/Rv-029.Go/backend/models"
	gocql "github.com/gocql/gocql"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUserCRUD is a mock of UserCRUD interface
type MockUserCRUD struct {
	ctrl     *gomock.Controller
	recorder *MockUserCRUDMockRecorder
}

// MockUserCRUDMockRecorder is the mock recorder for MockUserCRUD
type MockUserCRUDMockRecorder struct {
	mock *MockUserCRUD
}

// NewMockUserCRUD creates a new mock instance
func NewMockUserCRUD(ctrl *gomock.Controller) *MockUserCRUD {
	mock := &MockUserCRUD{ctrl: ctrl}
	mock.recorder = &MockUserCRUDMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserCRUD) EXPECT() *MockUserCRUDMockRecorder {
	return m.recorder
}

// AddRoleToProject mocks base method
func (m *MockUserCRUD) AddRoleToProject(arg0 gocql.UUID, arg1 string, arg2 gocql.UUID) error {
	ret := m.ctrl.Call(m, "AddRoleToProject", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRoleToProject indicates an expected call of AddRoleToProject
func (mr *MockUserCRUDMockRecorder) AddRoleToProject(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRoleToProject", reflect.TypeOf((*MockUserCRUD)(nil).AddRoleToProject), arg0, arg1, arg2)
}

// CheckUserPassword mocks base method
func (m *MockUserCRUD) CheckUserPassword(arg0 models.User) (models.User, error) {
	ret := m.ctrl.Call(m, "CheckUserPassword", arg0)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUserPassword indicates an expected call of CheckUserPassword
func (mr *MockUserCRUDMockRecorder) CheckUserPassword(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserPassword", reflect.TypeOf((*MockUserCRUD)(nil).CheckUserPassword), arg0)
}

// Delete mocks base method
func (m *MockUserCRUD) Delete(arg0 *models.User) error {
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockUserCRUDMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserCRUD)(nil).Delete), arg0)
}

// DeleteProject mocks base method
func (m *MockUserCRUD) DeleteProject(arg0, arg1 gocql.UUID) error {
	ret := m.ctrl.Call(m, "DeleteProject", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProject indicates an expected call of DeleteProject
func (mr *MockUserCRUDMockRecorder) DeleteProject(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProject", reflect.TypeOf((*MockUserCRUD)(nil).DeleteProject), arg0, arg1)
}

// FindByEmail mocks base method
func (m *MockUserCRUD) FindByEmail(arg0 *models.User) error {
	ret := m.ctrl.Call(m, "FindByEmail", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindByEmail indicates an expected call of FindByEmail
func (mr *MockUserCRUDMockRecorder) FindByEmail(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockUserCRUD)(nil).FindByEmail), arg0)
}

// FindByID mocks base method
func (m *MockUserCRUD) FindByID(arg0 *models.User) error {
	ret := m.ctrl.Call(m, "FindByID", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindByID indicates an expected call of FindByID
func (mr *MockUserCRUDMockRecorder) FindByID(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockUserCRUD)(nil).FindByID), arg0)
}

// Insert mocks base method
func (m *MockUserCRUD) Insert(arg0 *models.User) error {
	ret := m.ctrl.Call(m, "Insert", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockUserCRUDMockRecorder) Insert(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockUserCRUD)(nil).Insert), arg0)
}

// Update mocks base method
func (m *MockUserCRUD) Update(arg0 *models.User) error {
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockUserCRUDMockRecorder) Update(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserCRUD)(nil).Update), arg0)
}
