// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Social-projects-Rivne/Rv-029.Go/backend/models (interfaces: ProjectCRUD)

// Package mocks is a generated GoMock package.
package mocks

import (
	models "github.com/Social-projects-Rivne/Rv-029.Go/backend/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockProjectCRUD is a mock of ProjectCRUD interface
type MockProjectCRUD struct {
	ctrl     *gomock.Controller
	recorder *MockProjectCRUDMockRecorder
}

// MockProjectCRUDMockRecorder is the mock recorder for MockProjectCRUD
type MockProjectCRUDMockRecorder struct {
	mock *MockProjectCRUD
}

// NewMockdecodeAndValidateProjectCRUD creates a new mock instance
func NewMockProjectCRUD(ctrl *gomock.Controller) *MockProjectCRUD {
	mock := &MockProjectCRUD{ctrl: ctrl}
	mock.recorder = &MockProjectCRUDMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProjectCRUD) EXPECT() *MockProjectCRUDMockRecorder {
	return m.recorder
}

// Delete mocks base method
func (m *MockProjectCRUD) Delete(arg0 *models.Project) error {
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockProjectCRUDMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockProjectCRUD)(nil).Delete), arg0)
}

// FindByID mocks base method
func (m *MockProjectCRUD) FindByID(arg0 *models.Project) error {
	ret := m.ctrl.Call(m, "FindByID", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindByID indicates an expected call of FindByID
func (mr *MockProjectCRUDMockRecorder) FindByID(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockProjectCRUD)(nil).FindByID), arg0)
}

// GetProjectList mocks base method
func (m *MockProjectCRUD) GetProjectList(arg0 *models.Project) ([]models.Project, error) {
	ret := m.ctrl.Call(m, "GetProjectList", arg0)
	ret0, _ := ret[0].([]models.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectList indicates an expected call of GetProjectList
func (mr *MockProjectCRUDMockRecorder) GetProjectList(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectList", reflect.TypeOf((*MockProjectCRUD)(nil).GetProjectList), arg0)
}

// Insert mocks base method
func (m *MockProjectCRUD) Insert(arg0 *models.Project) error {
	ret := m.ctrl.Call(m, "Insert", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockProjectCRUDMockRecorder) Insert(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockProjectCRUD)(nil).Insert), arg0)
}

// Update mocks base method
func (m *MockProjectCRUD) Update(arg0 *models.Project) error {
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockProjectCRUDMockRecorder) Update(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockProjectCRUD)(nil).Update), arg0)
}
