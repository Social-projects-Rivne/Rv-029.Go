// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Social-projects-Rivne/Rv-029.Go/backend/models (interfaces: ProjectStorage)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockProjectStorage is a mock of ProjectStorage interface
type MockProjectStorage struct {
	ctrl     *gomock.Controller
	recorder *MockProjectStorageMockRecorder
}

// MockProjectStorageMockRecorder is the mock recorder for MockProjectStorage
type MockProjectStorageMockRecorder struct {
	mock *MockProjectStorage
}

// NewMockProjectStorage creates a new mock instance
func NewMockProjectStorage(ctrl *gomock.Controller) *MockProjectStorage {
	mock := &MockProjectStorage{ctrl: ctrl}
	mock.recorder = &MockProjectStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProjectStorage) EXPECT() *MockProjectStorageMockRecorder {
	return m.recorder
}

// Delete mocks base method
func (m *MockProjectStorage) Delete() error {
	ret := m.ctrl.Call(m, "Delete")
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockProjectStorageMockRecorder) Delete() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockProjectStorage)(nil).Delete))
}

// FindByID mocks base method
func (m *MockProjectStorage) FindByID() error {
	ret := m.ctrl.Call(m, "FindByID")
	ret0, _ := ret[0].(error)
	return ret0
}

// FindByID indicates an expected call of FindByID
func (mr *MockProjectStorageMockRecorder) FindByID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockProjectStorage)(nil).FindByID))
}

// GetProjectList mocks base method
func (m *MockProjectStorage) GetProjectList() error {
	ret := m.ctrl.Call(m, "GetProjectList")
	ret0, _ := ret[0].(error)
	return ret0
}

// GetProjectList indicates an expected call of GetProjectList
func (mr *MockProjectStorageMockRecorder) GetProjectList() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectList", reflect.TypeOf((*MockProjectStorage)(nil).GetProjectList))
}

// Insert mocks base method
func (m *MockProjectStorage) Insert() error {
	ret := m.ctrl.Call(m, "Insert")
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockProjectStorageMockRecorder) Insert() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockProjectStorage)(nil).Insert))
}

// Update mocks base method
func (m *MockProjectStorage) Update() error {
	ret := m.ctrl.Call(m, "Update")
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockProjectStorageMockRecorder) Update() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockProjectStorage)(nil).Update))
}
